mysql -uroot -p 12345 for ubuntu  
python fuction                                                                                                                      n

1).join  

 ",".join(["a", "b", "c"])
'a,b,c'

"".join(["a", "b", "c"])
  'abc'



2)sep  print("bhagvat","rajput",sep="#")

3)all   #all([x>2 for x in range(3,5)]) o/p= True because it having [3,4]>2 so it will true

4)end

5)map,lambda,filter
 
map(aFunction, aSequence)   #using map is equivalent to for loops It also has some performance benefit because it is usually faster than a manually coded for loop
a = [1, 2, 3]
b = [2, 3, 4, 5]

# Multiply elements of two lists together.
result = list(map(lambda x, y: x * y, a, b))

# Three elements are present.
print(result)

Output

[2, 6, 12

filter(aFunction, aSequence)
>>> list( filter((lambda x: x < 0), range(-5,5)))
[-5, -4, -3, -2, -1]
>>> 

reduce(aFunction, aSequence)
>>> from functools import reduce
>>> reduce( (lambda x, y: x * y), [1, 2, 3, 4] ) it passes the current product or division
24
>>> reduce( (lambda x, y: x / y), [1, 2, 3, 4] )
0.041666666666666664
>>> 

lambda
list comprehension


 (lambda x: x+2)(3)
    5

6)sum
7)count 
    s="bhagbat"
    s.count("a")  >o/p 2  
                                                             python job babglore
8)split


 string = 'This is a string, with words!'
>>> string.split()
['This', 'is', 'a', 'string,', 'with', 'words!']
                               
9)sort,sorted 
   if we want sort only string                                                          08046627906  9686371226
>>> a = 'ZENOVW'
>>> ''.join(sorted(a))
'ENOVWZ'
 if we want sort any type of list
  s=["ba","ab"]
   sorted(s)
    ["ab","ba"]

>>> a = 'ZENOVW'
>>> b = sorted(a)
>>> print b
['E', 'N', 'O', 'V', 'W', 'Z']
a=[1, 2, 3, 6, 8, 9, 23, 45, 78]
a.sort()
sorted(a, reverse=True)
[78, 45, 23, 9, 8, 6, 3, 2, 1]

list=[(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]
 sorted(tuples, key=last) 

   
10)upper,lower

11)min,max

12)replace #note replace use only string
   s="bhagvat"
   s.replace("b","y")

    "yhagvat"

 
13)find      x = "Hello World"
>>> x.find('World')
6

14)p=list.index("e")   it give index position of the element in list.ex. 1,2,3,,,,,,like
l[1] = ""  also delete
l[1:2] = [] also delete

14)s="bhavat"
   s[::-1] it will reverse "tavahb"
   s[1::2] it will return skip 1 character "hvt"
   >> s="bhagvat"
>> "".join(reversed(s))
tavgahb'

15) len("bhagvat") count start must be from 1 to...

    o/p 7

16)startswith   # it will return boolean
str = "this is string example....wow!!!";
print str.startswith( 'this' ) = True
print str.startswith( 'is', 2, 4 )=True
print str.startswith( 'this', 2, 4 =False

17)x = 3
print "decimal places"+"{:*<3d}".format(x)  o/p 3**
print "decimal places"+"{:0>3d}".format(x)   o/p 003
print "decimal places"+"{:.2f}".format(x)    o/p 3.00 up to two decimal places
print("Formatted Number with percentage: "+"{:.2%}".format(x))    to skip the point up to two decimal

18)del,remove,pop   #note :- Use del to remove an element by index, pop() to remove it by index if you need the returned value, and remove() to delete an element by value.
  
>>> a=[1,2,3]
>>> a.remove(2)
>>> a
[1, 3]
>>> a=[1,2,3]
>>> del a[1]
>>> a
[1, 3]
>>> a= [1,2,3]
>>> a.pop(1)
2
>>> a
[1, 3]
>>> 
19)enumerate  #note:- To get the values printed along with their index I can use Python's enumerate function like this

 mylist = ["a","b","c","d"]

>>> for i,j in enumerate(mylist):
...     print i,j
...
0 a
1 b
2 c
3 d
>>>                                                                                        1) iterator,generator,super,range vs xrange,requests

                                                                                              rdbms vs nosql


20) zip  - Iterate over two lists in parallel
alist = ['a1', 'a2', 'a3']
blist = ['b1', 'b2', 'b3']

for a, b in zip(alist, blist):
    print a, b
Results:

a1 b1
a2 b2                                                                                  1) to see file permission:-  ls -ld /var/www/html/
a3 b3                                                                                   2)     to give the read, write,execute permission:- sudo chmod -R 777 /var/www/html
                                                                                        


21)enumerate with zip
alist = ['a1', 'a2', 'a3']
blist = ['b1', 'b2', 'b3']

for i, (a, b) in enumerate(zip(alist, blist)):
    print i, a, b
Results:

0 a1 b1
1 a2 b2
2 a3 b3

22) from random import shuffle

    color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']

    shuffle(color)

    print(color)

23) iteritems():,itertools 
def print_keyword_args(**kwargs):
...     # kwargs is a dict of the keyword args passed to the function
...     for key, value in kwargs.iteritems():
...         print "%s  = %s" % (key, value) same as

                     or 'same as'

            print "{0} = {1}" .format(key, value)
>>> print_keyword_args(first_name="John", last_name="Doe")
first_name = John
last_name = Doe

import itertools  
print(list(itertools.permutations([1,2,3]))) 

import itertools  
original_list = [[2,4,3],[1,5,6], [9], [7,9,0]]  
new_merged_list = list(itertools.chain(*original_list))  
print(new_merged_list)
[2, 4, 3, 1, 5, 6, 9, 7, 9, 0] 


24)if my_class is None:
          'or'                      # how to use none
   if null_variable == None:


25) set defference:
  list1 = (1, 2, 3, 4)
  list2 = [5, 6]
print (set(list1))   o/p set([1, 2, 3, 4])

print(list(set(list1) - set(list2)))    # it will print list1 element that does not exist into list2
 [1,2,3,4]

26) random
import random  
color_list = ['Red', 'Blue', 'Green', 'White', 'Black']  
print(random.choice(color_list))  # it will select an item randomly from a list)

27) diff between append and extend over a list

   extend takes an iterable (such as a list, tuple or string), and adds each element of the iterable to the list one at a time,
   while append adds its argument to the end of the list as a single item. 
   The key thing to note is that extend is a more efficient version of calling append
   list.append adds a single item to the end of your list

 ex. d = [0,10,2,0] 
     print(d)   
     d.extend((bhag")) 
     print(d)#o/p [0, 10, 2, 0, 'b', 'h', 'a', 'g']

28)update  #it used in dictionary
 ex1) d = {0:10, 1:20}  
print(d)  
d.update({2:30})  
print(d) 
 
ex.2)dic1={1:10, 2:20}  
     dic2={3:30, 4:40}  
     dic3={5:50,6:60} 
     d={7:[1,2,3]}
     dic4 = {}  
     for d in (dic1, dic2, dic3,d): 
	dic4.update(d)  
     print(dic4)
{1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60, 7: [1, 2, 3]}




29) *list ccomprehension=:it create a list as well append

   [i for i in [1, 2, 3, 4]] o/p [1,2,3,4]
   *dictionary comprehension= : it create by default dictionary  and update

   {i:j for i, j in {1: 'a', 2: 'b'}.items()} o/p {1: 'a', 2: 'b'}

   *tuple and set  comprehension :  i convert first into list then  tuple and set

   tuple(i for i in (1, 2, 3)) o/p (1,2,3)
   set(i for i in (1, 2, 3))   0/p set([1,2,3])



mysql -urajput1-p
http://blog.luisrei.com/articles/flaskrest.html # rest api example
http://www.programiz.com/python-programming
######################################################################################
 JSONEncoder().encode({"foo": ["bar", "baz"]})   #json encoder to string
'{"foo": ["bar", "baz"]}'
#In order to fully serialize your Restaurant instances, you will need to serialize the Place models as well:

all_objects = list(Restaurant.objects.all()) + list(Place.objects.all())
data = serializers.serialize('xml', all_objects)
objectQuerySet = ConventionCard.objects.filter(ownerUser = user)
data = serializers.serialize('json', list(objectQuerySet), fields=('fileName','id'))
#########################################
POSTGREYSQL NOTES
https://docs.djangoproject.com/en/1.10/topics/db/sql/
https://docs.djangoproject.com/en/1.10/topics/db/sql/                                         # best practice site code for python

https://docs.djangoproject.com/en/1.10/topics/db/examples/many_to_one/                         http://www.w3resource.com/python-exercises/list/
                                                                                               http://codescracker.com/python/index.htm

http://puyb.net/download/djangobook/res2.html

http://uxscrutiny.com/2014/03/404-and-500-errors-in-django/                                     * for create django project 

http://www.jsondata.ninja/ninja.html #json to spreedsheet                                       1)django-admin.py startproject myproject1

 http://www.convertcsv.com/csv-to-json.htm                                                     
 2)python manage.py startapp myapp
https://json-csv.com/
http://alvinalexander.com/blog/post/postgresql/log-in-postgresql-database              Note: If you're using a Chromebook, add this line at the bottom of your settings.py file:
http://www.cyberciti.biz/tips/postgres-allow-remote-access-tcp-connection.html         MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
https://www.postgresql.org/docs/9.3/static/auth-pg-hba-conf.html
http://customer.docushare.xerox.com/s.nl/ctype.KB/it.I/id.29578/KB.1777/.f
http://ubuntuserverguide.com/2013/12/how-to-setup-postgresql-database-server-and-phppgadmin-in-ubuntu-server-13-10.html

sudo vi pg_hba.conf  note : etc/postgresql/9.3$main tb jake pase krna ye command tb open hogi proper

http://stackoverflow.com/questions/11407349/mysql-how-to-export-and-import-an-sql-file-from-command-line

sudo passwd postgres

sudo service postgresql restart
psql -h 52.66.52.203 -p 5432 -U postgress contree #connect to local machnie
psql -h 52.66.113.94 -p 5432 -U postgress contree

###########################################################################
ssh -i aws.pem ubuntu@52.66.113.94
 http://solarwaale.com:2082/cpsess6854715637/frontend/paper_lantern/index.html?login=1&post_login=97619850932816

private : 172 31 28 70

public : 52.66.113.94
ubuntu3 :52.66.52.203
################################################
SELECT User,Host FROM mysql.user;
DROP USER 'testuser'@'localhost';
python manage.py runserver 0.0.0.0:8181
python manage.py runserver 127.0.0.1:8181
http://127.0.0.1:8000/polls/pal
http://nemesisdesign.net/blog/coding/django-how-retrieve-query-string-parameters/
https://docs.djangoproject.com/en/1.10/ref/contrib/admin/

https://developer.yahoo.com/python/python-rest.html
http://www.jaimegil.me/2012/12/26/a-python-restful-api-consumer.html
http://stackoverflow.com/questions/9802788/call-a-rest-api-in-php
http://engineering.hackerearth.com/2014/08/21/python-requests-module/
http://www.djangobook.com/en/2.0/chapter08.html
http://www.tutorialspoint.com/django/django_url_mapping.htm
http://www.pythonforbeginners.com/requests/using-requests-in-python


http://alerts.solutionsinfini.com/api/v3/index.php?method=sms&api_key=A0f9844e771dd6623af1749369aa3d29b&to=" . 9205313699 . "&sender=Contri&message=" . urlencode(12345)
http://stackoverflow.com/questions/28259697/how-to-post-contents-of-json-file-to-restful-api-with-python-using-requests-modu

http://stackoverflow.com/questions/9733638/post-json-using-python-requests
http://stackoverflow.com/questions/9733638/post-json-using-python-requests
http://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask
##############################################################################################
import urllib2
response = urllib2.urlopen('https://api.instagram.com/v1/tags/pizza/media/XXXXXX')
html=response.read()
print html
################################################################
>>> from django.http import JsonResponse
>>> response = JsonResponse({'foo': 'bar'})
>>> response.content
b'{"foo": "bar"}'
response = JsonResponse(data, encoder=MyJSONEncoder) #use this also
#######################################################################################
>>> import simplejson as json
>>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4 * ' '))
{
    "4": 5,
    "6": 7
}
######################################################################################################
\w and \w+ diffrence
\w for a for catching for single char and \w+ catching for string
###############################################################################################

inspectdb works fine now. (Django 1.7.1) Simply running manage.py inspectdb will create classes for all tables in database 
and display on console.

 $ python manage.py inspectdb
Save this as a file by using standard Unix output redirection:

 $ python manage.py inspectdb > contree/models.py
https://docs.djangoproject.com/en/1.10/ref/django-admin/#django-admin-inspectdb      note:-  :w !sudo tee %  this command for saving etc admin file

 python manage.py flush      #for delete all table from the database

##################################################################################
show create table table_name; # for table info that means show table field
#CREATE TABLE IN YOUR DATABASE.

python manage.py createsuperuser

#you first need to create migration files for your apps:

python manage.py makemigrations contree         
#and then migrate those schemes

python manage.py makemigrations

python manage.py migrate

##how to make security in api using auth token
                                                                                       
    1)changes in modles.py
    2)changes in setting.py
    3)python manage.py migrate
    4)python manage.py createsuperuser

# apply on migration

python manage.py makemigrations sessions
python manage.py makemigrationsadmin 
python manage.py makemigrations sites 
python manage.py makemigrations auth 
python manage.py makemigrations contenttypes  
python manage.py makemigrations contree
 
python manage.py makemigrations


http://localhost:8181
sudo apt-get install gettext
ps -ef|grep python          #to see backgroung running processs
 

 nohup python manage.py runserver 0.0.0.0:8000                                                                                       00&






/usr/bin/mysql_secure_installation
#API LEARN
https://impythonist.wordpress.com/2015/07/12/build-an-api-under-30-lines-of-code-with-python-and-flask/
 
https://www.dataquest.io/blog/python-api-tutorial/



#######################################################################################
sudo apt-get update
sudo apt-get mysql-server
sudo mysql_install_db
sudo mysql_secure_installation
select Host,User from mysql.user;

#########################################################

Editing the MySQL my.cnf file
Login to your server via SSH.
To edit the MySQL settings with nano type the following: nano /etc/mysql/my.cnf. Note! ...
Find the line to edit. ...
Enter Ctrl + O to "WriteOut" or save the settings.
Then Ctrl + X to exit.
Restart MySQL by typing the following.

CREATE USER 'test'@'%' IDENTIFIED BY '12345';
CREATE USER 'david'@'0.0.0.0' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'test'@'%' IDENTIFIED BY '12345' WITH GRANT OPTION;
GRANT SELECT,INSERT,DELETE,UPDATE ON *.* TO 'david'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;
FLUSH PRIVILEGES;
exit;
#############################################################
http://gowrishankarnath.com/read-write-json-python/
https://sqlizer.io/
http://www.postgresqltutorial.com/import-csv-file-into-posgresql-table/
http://flask.pocoo.org/
https://realpython.com/blog/python/api-integration-in-python/
http://tutorial.djangogirls.org/en/django_models/